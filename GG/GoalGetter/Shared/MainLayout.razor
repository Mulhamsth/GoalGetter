@inherits LayoutComponentBase
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavigationManager
@inject IThemeService themeService

<MudThemeProvider @bind-IsDarkMode="@themeService.IsDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <!-- Leiste oben - Background: #0088d3 -->
    <MudAppBar Elevation="0" Style="background-color: #0088d3">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudToggleIconButton @bind-Toggled="@themeService.IsDarkMode"
                             Icon="@Icons.Material.Filled.DarkMode" Color="@Color.Dark"
                             ToggledIcon="@Icons.Material.Filled.WbSunny" ToggledColor="@Color.Surface" ToggledTitle="On" />

        <MudSpacer />
        <MudImage Src="images/logo-goalgetter.png" Width="50" Height="50" Alt="GG-Logo" Style="border: none" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">
                <a @onclick="GoToRootPage" style="cursor: pointer; text-decoration: none;">GoalGetter</a>
            </MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <a @onclick="Logout" href="javascript:void(0)">Logout</a>
                </Authorized>
                <NotAuthorized>
                    <a href="/login">Login</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-5 pt-5">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void GoToRootPage()
    {
        NavigationManager.NavigateTo("/");
    }
    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        NavigationManager.NavigateTo("/", true);
    }
}
