@inject ISnackbar Snackbar
@inject IUpdateTaskUseCase updateTaskUseCase
@inject IDialogService DialogService

<EditForm Model="newtask" OnValidSubmit="UpdateTask">
    <DataAnnotationsValidator />
    <MudItem>
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Task Name" HelperText="Use a meaningful Name"
                              @bind-Value="newtask.Name" For="@(() => newtask.Name)" />
                <MudTextField Label="Task Description" Class="mt-3" HelperText="additional informations about the task" Lines="3" T="string" Variant="Variant.Outlined"
                              @bind-Value="newtask.Description" For="@(() => newtask.Description)" />
                <MudDatePicker Label="Date Format" @bind-Date="newtask.Deadline" DateFormat="dd.MM.yyyy" />

                <MudCard Class="d-flex pa-4">

                    <MudCardHeader>
                        <CardHeaderAvatar>
                            @if (newtask.AssignedPerson != null)
                            {
                                @if (newtask.AssignedPerson.person.AvatarPath != null)
                                {
                                    <MudAvatar Image="@newtask.AssignedPerson.person.AvatarPath"></MudAvatar>
                                }
                                else
                                {
                                    <MudAvatar Color="@newtask.AssignedPerson.person.AvatarColor">@newtask.AssignedPerson.person.Firstname.First()@newtask.AssignedPerson.person.Lastname.First()</MudAvatar>

                                }
                            }
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            @if (newtask.AssignedPerson != null)
                            {

                                <MudText>@newtask.AssignedPerson.person.Firstname @newtask.AssignedPerson.person.Lastname</MudText>
                            }
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudButton Variant="Variant.Filled" DisableElevation="true" Style="background-color: #0088d3; color: white" Color="Color.Primary" OnClick="@((e) => OpenDialog(maxWidth))">
                                + Teammember
                            </MudButton>
                        </CardHeaderActions>
                    </MudCardHeader>

                </MudCard>
                <ValidationMessage For="@(() => newtask.AssignedPerson)"></ValidationMessage>

            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" class="btn btn-primary">Save</MudButton>
                <MudButton ButtonType="ButtonType.Button" class="btn btn-primary" @onclick="Cancel">Cancel</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</EditForm>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public ProjectTask newtask { get; set; }

    [Parameter]
    public Action OnTaskUpdated { get; set; } // Update the type to

    [Parameter]
    public int ProId { get; set; }

    protected override void OnInitialized()
    {
        newtask.Deadline = DateTime.Now;
        newtask.Description = "";
    }


    private async Task UpdateTask()
    {
        StatusReport<EmptyVal> status = await updateTaskUseCase.ExecuteAsync(newtask, ProId);
        Snackbar.Add(status.Reason, status.severity);
        OnTaskUpdated?.Invoke(); // Invoke the event callback to trigger reload
        MudDialog.Close(DialogResult.Ok(true));

    }

    void Cancel() => MudDialog.Cancel();

    //nested Dialog To add Teammember
    private string searchterm = "";
    private bool reloadFlag = false;
    public bool _isOpen;

    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true };

    private void OpenDialog(DialogOptions options)
    {
        var parameter = new DialogParameters { ["ProId"] = ProId };
        parameter.Add("OnTeammemeberAdded", HandleTeammemberAdded);
        DialogService.Show<AddTeammemberToTask>("Assign to Teammember", parameter, options);
    }

    private void HandleTeammemberAdded(Teammember teammember)
    {
        reloadFlag = !reloadFlag;
        searchterm = ""; // Optionally, clear the search term to display all projects after adding
        newtask.AssignedPerson = teammember;
        StateHasChanged();
    }
}
