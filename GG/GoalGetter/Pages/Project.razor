@page "/project/{ProId:int}"
@inject IViewProjectByIdUseCase ViewProjectByIdUseCase
@layout ProjectMainLayout
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IUpdateProjectUseCase updateProjectUseCase
@inject IRemoveProjectUseCase removeProjectUseCase
@inject IGetProgressChartUseCase getProgressChartUseCase
@inject IDialogService DialogService

<AuthorizeView>
	<Authorized>
		<MudText Typo="Typo.h2">@project.Name</MudText>
		<MudText>@project.Description</MudText>
		<MudSelect T="ProgressStatus" @bind-Value="@project.status" Label="Select progress status" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable>
			@foreach (ProgressStatus status in Enum.GetValues(typeof(ProgressStatus)))
			{
				<MudSelectItem Value="@(status)" />
				OnChangeData();
			}
		</MudSelect>
		<MudButton Variant="Variant.Filled" OnClick="DeleteProject" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton>


		<MudChart LegendPosition="Position.Bottom" ChartType="ChartType.Pie" Width="300px" Height="300px" InputData="@data" InputLabels="@labels">
			<CustomGraphics>
			</CustomGraphics>
		</MudChart>

		<!-- Rest of your component code -->
	</Authorized>
	<NotAuthorized>
		<NotAuthorizedMudCard/>
	</NotAuthorized>
</AuthorizeView>

@code {

	[Parameter]
	public int ProId { get; set; }

	private GG.CoreBusiness.Project project = new GG.CoreBusiness.Project();

	/* Statistical Data here */
	public double[] data = { 25, 25, 50 };
	public string[] labels = { "Upcomming", "In_Progress", "Done" };




	protected override async Task OnParametersSetAsync()
	{
		var result = ViewProjectByIdUseCase.ExecuteAsync(this.ProId).Result;
		if (result.Value != null)
			project = result.Value;
		else
		{
			Snackbar.Add(result.Reason, result.severity);
			NavigationManager.NavigateTo("/");
		}

		//Load Statistics Data
		float upcomming = (await getProgressChartUseCase.ExecuteAsync(ProId, ProgressStatus.Upcomming)).Value;
		float progress = (await getProgressChartUseCase.ExecuteAsync(ProId, ProgressStatus.In_Progress)).Value;
		float done = (await getProgressChartUseCase.ExecuteAsync(ProId, ProgressStatus.Done)).Value;

		data[0] = upcomming;
		data[1] = progress;
		data[2] = done;

		labels[0] = $"Upcomming {(upcomming*100).ToString("F1")}%";
		labels[1] = $"In_Progress {(progress*100).ToString("F1")}%";
		labels[2] = $"Done {(done*100).ToString("F1")}%";
	}

	private ProgressStatus tmp; //needed to not spam projectRepo (close eyes or brain damage might occur)
	private void OnChangeData()
	{
		if(project.status != tmp)
			updateProjectUseCase.ExecuteAsync(ProId);
		tmp = project.status;
	}

	private async Task DeleteProject()
	{
		var parameters = new DialogParameters();
		parameters.Add("ContentText", "Do you really want to delete this Project? This process cannot be undone.");
		parameters.Add("ButtonText", "Delete");
		parameters.Add("Color", Color.Error);

		var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

		var dialog = await DialogService.Show<ConfirmDialog>("Delete", parameters, options).Result;

		if (!dialog.Cancelled)
		{
			var status = await removeProjectUseCase.ExecuteAsync(ProId);
			Snackbar.Add(status.Reason, status.severity);
			NavigationManager.NavigateTo("/");
		}
	} 


}
