@page "/project/{ProId:int}"
@inject IViewProjectByIdUseCase ViewProjectByIdUseCase
@layout ProjectMainLayout
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IUpdateProjectUseCase updateProjectUseCase
@inject IRemoveProjectUseCase removeProjectUseCase


	<MudText Typo="Typo.h2">@project.Name</MudText>
	<MudText>@project.Description</MudText>
	<MudSelect T="ProgressStatus" @bind-Value="@project.status" Label="Select progress status" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable >
	@foreach (ProgressStatus status in Enum.GetValues(typeof(ProgressStatus)))
	{
		<MudSelectItem Value="@(status)" />
		OnChangeData();
	}
	</MudSelect>	
	<MudButton Variant="Variant.Filled" OnClick="DeleteProject" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton>

	<!-- Rest of your component code -->


@code {

	[Parameter]
	public int ProId { get; set; }

	private GG.CoreBusiness.Project project = new GG.CoreBusiness.Project();

	protected override async Task OnParametersSetAsync()
	{
		var result = ViewProjectByIdUseCase.ExecuteAsync(this.ProId).Result;
		if (result.Value != null)
			project = result.Value;
		else
		{
			Snackbar.Add(result.Reason, result.severity);
			NavigationManager.NavigateTo("/");
		}
	}

	private ProgressStatus tmp; //needed to not spam projectRepo (close eyes or brain damage might occur)
	private void OnChangeData()
	{
		if(project.status != tmp)
			updateProjectUseCase.ExecuteAsync(ProId);
		tmp = project.status;
	}

	private async Task DeleteProject()
	{
		var status = await removeProjectUseCase.ExecuteAsync(ProId);
		Snackbar.Add(status.Reason, status.severity);
		NavigationManager.NavigateTo("/");
	} 
}
