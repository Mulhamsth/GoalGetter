@page "/project/{ProId:int}"
@inject IViewProjectByIdUseCase ViewProjectByIdUseCase
@layout ProjectMainLayout
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IUpdateProjectUseCase updateProjectUseCase
@inject IRemoveProjectUseCase removeProjectUseCase
@inject IDialogService DialogService
@inject IGetProgressChartUseCase getProgressChartUseCase

<AuthorizeView>
	<Authorized>
		<MudGrid>

			<MudItem xs="6">
				<MudText Typo="Typo.h2">Dashboard</MudText>
			</MudItem>

			<MudItem xs="12">
				<MudContainer Class="pa-0">
					<MudStack Row="true" Spacing="4" Class="gap-16">

						<MudItem xs="3">
							<MudCard Elevation="3">
								<MudCardHeader>
									<CardHeaderAvatar>
										<MudAvatar Color="Color.Warning" Variant="Variant.Filled">
											<MudIcon Color="Color.Dark" Icon="@Icons.Material.Outlined.Person" Size="Size.Large" />
										</MudAvatar>
									</CardHeaderAvatar>
									<CardHeaderContent>
										<MudText>Resourcess</MudText>
										<MudText>@project.assignedTeam.members.Count</MudText>
									</CardHeaderContent>
								</MudCardHeader>
							</MudCard>
						</MudItem>

						<MudItem xs="3">
							<MudCard Elevation="3">
								<MudCardHeader>
									<CardHeaderAvatar>
										<MudAvatar Style="@($"color:{Colors.Red.Darken1}; background:{Colors.Red.Lighten3};")" Variant="Variant.Filled">
											<MudIcon Icon="@Icons.Material.Outlined.Task" Size="Size.Large" />
										</MudAvatar>
									</CardHeaderAvatar>
									<CardHeaderContent>
										<MudText>Tasks</MudText>
										<MudText>@project.Tasks.Count</MudText>
									</CardHeaderContent>
								</MudCardHeader>
							</MudCard>
						</MudItem>

						<MudItem xs="3">
							<MudCard Elevation="3">
								<MudCardHeader>
									<CardHeaderAvatar>
										<MudAvatar Color="Color.Success" Variant="Variant.Filled">
											<MudIcon Color="Color.Dark" Icon="@Icons.Material.Outlined.MonetizationOn" Size="Size.Large" />
										</MudAvatar>
									</CardHeaderAvatar>
									<CardHeaderContent>
										<MudText>Budget</MudText>
										<MudText>@project.Budget.ToString("C")</MudText>
									</CardHeaderContent>
								</MudCardHeader>
							</MudCard>
						</MudItem>
					</MudStack>

				</MudContainer>
			</MudItem>

			<MudItem xs=6>
				<MudStack>
					<MudItem>
						<MudCard Elevation="3">
							<MudCardHeader>
								<CardHeaderContent>
									<MudText Typo="Typo.h6">Project Name</MudText>
								</CardHeaderContent>
								<CardHeaderActions>
									<MudSelect T="ProgressStatus" @bind-Value="@project.status" Label="State" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
										@foreach (ProgressStatus status in Enum.GetValues(typeof(ProgressStatus)))
										{
											<MudSelectItem Value="@(status)" />
											OnChangeData();
										}
									</MudSelect>
								</CardHeaderActions>
							</MudCardHeader>
							<MudCardContent>
								<MudText>@project.Name</MudText>
							</MudCardContent>
							<MudCardActions>
										<MudButton Variant="Variant.Filled" OnClick="DeleteProject" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton>
										
							</MudCardActions>
						</MudCard>
					</MudItem>
					<MudItem>
						<MudCard Style="min-height: 13.5rem" Elevation="3">
							<MudCardHeader>
								<CardHeaderContent>
									<MudText Typo="Typo.h6">Project Description</MudText>
								</CardHeaderContent>
							</MudCardHeader>
							<MudCardContent>
								<MudText>@project.Description</MudText>
							</MudCardContent>
						</MudCard>
					</MudItem>
				</MudStack>
				
			</MudItem>

			<MudItem xs="6">
				<MudPaper Class="rounded d-flex align-center justify-center pa-6" MaxWidth="27rem" Square="true" Elevation="3">
					<MudChart LegendPosition="Position.Bottom" ChartType="ChartType.Pie" Width="300px" Height="300px" InputData="@data" InputLabels="@labels">
						<CustomGraphics>
						</CustomGraphics>
					</MudChart>
				</MudPaper>
			</MudItem>

		</MudGrid>
		<!-- Rest of your component code -->
	</Authorized>
	<NotAuthorized>
		<NotAuthorizedMudCard/>
	</NotAuthorized>
</AuthorizeView>

@code {

	[Parameter]
	public int ProId { get; set; }

	private GG.CoreBusiness.Project project = new GG.CoreBusiness.Project();

	/* Statistical Data here */
	public double[] data = { 25, 25, 50 };
	public string[] labels = { "Upcoming", "In_Progress", "Done" };




	protected override async Task OnParametersSetAsync()
	{
		var result = ViewProjectByIdUseCase.ExecuteAsync(this.ProId).Result;
		if (result.Value != null)
			project = result.Value;
		else
		{
			Snackbar.Add(result.Reason, result.severity);
			NavigationManager.NavigateTo("/");
		}

		//Load Statistics Data
		float upcomming = (await getProgressChartUseCase.ExecuteAsync(ProId, ProgressStatus.Upcoming)).Value;
		float progress = (await getProgressChartUseCase.ExecuteAsync(ProId, ProgressStatus.In_Progress)).Value;
		float done = (await getProgressChartUseCase.ExecuteAsync(ProId, ProgressStatus.Done)).Value;

		data[0] = upcomming;
		data[1] = progress;
		data[2] = done;

		labels[0] = $"Upcomming {(upcomming*100).ToString("F1")}%";
		labels[1] = $"In_Progress {(progress*100).ToString("F1")}%";
		labels[2] = $"Done {(done*100).ToString("F1")}%";
	}

	private ProgressStatus tmp; //needed to not spam projectRepo (close eyes or brain damage might occur)
	private void OnChangeData()
	{
		if(project.status != tmp)
			updateProjectUseCase.ExecuteAsync(ProId);
		tmp = project.status;
	}

	private async Task DeleteProject()
	{
		var parameters = new DialogParameters();
		parameters.Add("ContentText", "Do you really want to delete this Project? This process cannot be undone.");
		parameters.Add("ButtonText", "Delete");
		parameters.Add("Color", Color.Error);

		var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

		var dialog = await DialogService.Show<ConfirmDialog>("Delete", parameters, options).Result;

		if (!dialog.Cancelled)
		{
			var status = await removeProjectUseCase.ExecuteAsync(ProId);
			Snackbar.Add(status.Reason, status.severity);
			NavigationManager.NavigateTo("/");
		}
	} 


}
