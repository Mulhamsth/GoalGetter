@inject IAddPersonUseCase AddPersonUseCase
@inject NavigationManager NavigationManager

<MudDialog>
    <DialogContent>
        <EditForm Model="newPerson" OnValidSubmit="SavePerson">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <div class="form-group">
                <label for="firstname">First name</label>
                <MudTextField id="firstname" @bind-Value="newPerson.Firstname" class="form-control"></MudTextField>
            </div>

            <div class="form-group">
                <label for="lastname">Last name</label>
                <MudTextField id="lastname" @bind-Value="newPerson.Lastname" class="form-control"></MudTextField>
            </div>

            <div class="form-group">
                <label for="email">Email</label>
                <MudTextField id="email" @bind-Value="newPerson.Email" class="form-control" InputType="InputType.Email"></MudTextField>
            </div>

            <div class="form-group">
                <label for="phone">Phone number</label>
                <MudTextField id="phone" @bind-Value="newPerson.Phone" class="form-control" InputType="InputType.Telephone"></MudTextField>
            </div>

            <br />
            <MudButton ButtonType="ButtonType.Submit" class="btn btn-primary">Save</MudButton>
            <MudButton ButtonType="ButtonType.Button" class="btn btn-primary" @onclick="Cancel">Cancel</MudButton>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    private Person newPerson = new Person();
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public EventCallback<bool> Windowclosed { get; set; }

    private async Task SavePerson()
    {
        await AddPersonUseCase.ExecuteAsync(newPerson);
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();
}
