@inject IAddPersonUseCase AddPersonUseCase
@inject ISnackbar Snackbar
@using Libraries.DistanceAddressCalculator;



<EditForm Model="newPerson" OnValidSubmit="SavePerson">
	<DataAnnotationsValidator />
	<MudItem>
		<MudCard>
			<MudCardContent>
				<MudTextField Label="First name" HelperText="Max. 8 characters"
								@bind-Value="newPerson.Firstname" For="@(() => newPerson.Firstname)" />
				<MudTextField Label="Last name" Class="mt-3"
								@bind-Value="newPerson.Lastname" For="@(() => newPerson.Lastname)" />
				<MudTextField Label="Email" Class="mt-3"
								@bind-Value="newPerson.Email" For="@(() => newPerson.Email)" InputType="InputType.Email" />
				<MudTextField Label="Phone number" Class="mt-3"
								@bind-Value="newPerson.Phone" For="@(() => newPerson.Phone)"/>

				<MudAutocomplete T="Address" Label="Address" @bind-Value="selectedAddress" SearchFunc="@SearchAddress"
									ResetValueOnEmptyText="@resetValueOnEmptyText"
									CoerceText="@coerceText" CoerceValue="@coerceValue"
									AdornmentIcon="@Icons.Material.Filled.Map" AdornmentColor="Color.Primary" />

				<MudFileUpload T="IBrowserFile" Accept=".jpg, .png" FilesChanged="UploadFiles">
					<ButtonTemplate Context="pictureUploadContext">
						<MudIconButton HtmlTag="label"
									   Color="Color.Info"
									   Icon="@Icons.Material.Filled.PhotoCamera"
										for="@pictureUploadContext">
						</MudIconButton>
					</ButtonTemplate>
				</MudFileUpload>

				@if (files.Any())
				{
					<MudText>@files.Last().Name</MudText>
				}

			</MudCardContent>
			<MudCardActions>
				<MudButton ButtonType="ButtonType.Submit" class="btn btn-primary">Save</MudButton>
				<MudButton ButtonType="ButtonType.Button" class="btn btn-primary" @onclick="Cancel">Cancel</MudButton>
			</MudCardActions>
		</MudCard>
	</MudItem>
</EditForm>

@code {

	private Person newPerson = new Person();
	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public Action<bool> OnPersonAdded { get; set; } // Update the type to

	private async Task SavePerson()
	{
		newPerson.Address = selectedAddress;

		StatusReport<EmptyVal> status = await AddPersonUseCase.ExecuteAsync(newPerson, files.Any() ? files.Last() : null);
		Snackbar.Add(status.Reason, status.severity);

		MudDialog.Close(DialogResult.Ok(true));
		OnPersonAdded?.Invoke(true); // Invoke the event callback to trigger reload

	}

	void Cancel() => MudDialog.Cancel();

	//Avatar Upload
	private int maxUploadInMB = 5;

	IList<IBrowserFile> files = new List<IBrowserFile>();
	private void UploadFiles(IBrowserFile file)
	{
		files.Add(file);
	}

	//Location 
	private bool resetValueOnEmptyText;
	private bool coerceText;
	private bool coerceValue;
	private Address selectedAddress;
	private string addressval;
	private int API_CALLCOUNT = 0;
	private int TimeBetweenAPICall = 1000;

	private Address[] searchOptions =
	{
	};

	private async Task<IEnumerable<Address>> SearchAddress(string value)
	{
		// In real life, use an asynchronous function for fetching data from an API.
		await Task.Delay(5);

		if (value == null)
			return new List<Address>();

		// If the text is null or empty, don't return values (drop-down will not open).
		addressval = value;
		if(value.Length > 4)
			await TimerTask();

		return searchOptions;
	}

	private string latestSearch = "";
	private async Task UpdateAddresses()
	{
		latestSearch = addressval;
		searchOptions = Address.FindAddresses(addressval);
		API_CALLCOUNT++;
	}

	private int tmp = 0;
	private async Task TimerTask()
	{
		tmp++;
		int runtime = tmp;
		await Task.Delay(TimeBetweenAPICall);
		if(runtime == tmp)
			await UpdateAddresses();
	}


}
