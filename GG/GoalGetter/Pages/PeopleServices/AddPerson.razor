@inject IAddPersonUseCase AddPersonUseCase

<h1>Add Person</h1>
<EditForm Model="newPerson" OnValidSubmit="SavePerson">
	<DataAnnotationsValidator />
	<MudItem>
		<MudCard>
			<MudCardContent>
				<MudTextField Label="First name" HelperText="Max. 8 characters"
								@bind-Value="newPerson.Firstname" For="@(() => newPerson.Firstname)" />
				<MudTextField Label="Last name" Class="mt-3"
								@bind-Value="newPerson.Lastname" For="@(() => newPerson.Lastname)" />
				<MudTextField Label="Email" Class="mt-3"
								@bind-Value="newPerson.Email" For="@(() => newPerson.Email)" InputType="InputType.Email" />
				<MudTextField Label="Phone number" Class="mt-3"
								@bind-Value="newPerson.Phone" For="@(() => newPerson.Phone)" InputType="InputType.Telephone" />
			</MudCardContent>
			<MudCardActions>
				<MudButton ButtonType="ButtonType.Submit" class="btn btn-primary">Save</MudButton>
				<MudButton ButtonType="ButtonType.Button" class="btn btn-primary" @onclick="Cancel">Cancel</MudButton>
			</MudCardActions>
		</MudCard>
	</MudItem>
</EditForm>

@code {
	private Person newPerson = new Person();


	[Parameter]
	public EventCallback<bool> Windowclosed { get; set; }

	private async Task SavePerson()
	{
		await AddPersonUseCase.ExecuteAsync(newPerson);
		Windowclosed.InvokeAsync(false);
	}
	private void Cancel()
	{
		Windowclosed.InvokeAsync(false);
	}
}
