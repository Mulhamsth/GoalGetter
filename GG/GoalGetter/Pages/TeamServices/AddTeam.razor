@inject IViewPeopleIfNotInTeamUseCase viewPeopleIfNotInTeamUseCase
@inject IAddTeamUseCase addTeamUseCase
@inject ISnackbar Snackbar

<MudCard>
	<MudTable Items="people" MultiSelection="true" @bind-SelectedItems="@options" Striped="true">
		<HeaderContent>
        <MudTh>FirstName</MudTh>
        <MudTh>LastName</MudTh>
        <MudTh>Address</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Phone</MudTh>
		<MudTh>Avatar</MudTh>
    </HeaderContent>
	 <RowTemplate>
			<MudTd DataLabel="FirstName">@context.Firstname</MudTd>
			<MudTd DataLabel="LastName">@context.Lastname</MudTd>
			<MudTd DataLabel="Address">@context.Address</MudTd>
			<MudTd DataLabel="Email">@context.Email</MudTd>
			<MudTd DataLabel="Phone">@context.Phone</MudTd>
			<MudTd>
				@if (context.AvatarPath != null)
				{
					<MudAvatar Image="@context.AvatarPath"></MudAvatar>
				}
				else
				{
					<MudAvatar Color="@context.AvatarColor">@context.Firstname.First()@context.Lastname.First()</MudAvatar>

				}
			</MudTd>
    </RowTemplate>
	</MudTable>
	<MudCardActions>
		<MudButton ButtonType="ButtonType.Submit" class="btn btn-primary" @onclick="Save">Add</MudButton>
		<MudButton ButtonType="ButtonType.Button" class="btn btn-primary" @onclick="Cancel">Close</MudButton>
	</MudCardActions>
</MudCard>


@code {
	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public Action OnTeammmemberAdded { get; set; } // Update the type to

	void Cancel() => MudDialog.Cancel();

	[Parameter]
	public int ProId { get; set; }

	private IEnumerable<Person> people = new List<Person>();

	private HashSet<Person> options { get; set; } = new HashSet<Person>();

	protected override async Task OnInitializedAsync()
	{
		StatusReport<IEnumerable<Person>> status = viewPeopleIfNotInTeamUseCase.ExecuteAsync(ProId).Result;
		if (status.Value != null)
			people = status.Value;
		else
			Snackbar.Add(status.Reason, status.severity);
	}

	private void Save()
	{
		foreach (Person p in options)
		{
			
			addTeamUseCase.ExecuteAsync(new Teammember{person = p, Role= Teamrolle.Worker }, ProId);
			OnTeammmemberAdded?.Invoke(); // Invoke the event callback to trigger reload

		}
	}


}
