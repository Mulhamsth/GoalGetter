@inject NavigationManager NavigationManager
@inject IAddProjectUseCase AddProjectUseCase
@inject ISnackbar Snackbar

<MudDialog>
	<DialogContent>
		<EditForm Model="newProject" OnValidSubmit="SaveProject">
			<DataAnnotationsValidator></DataAnnotationsValidator>
			<MudTextField @bind-Value="newProject.Name" Label="Project Name" Variant="Variant.Outlined" For="@(() => newProject.Name)" />

			<br />
			<MudTextField Label="Project Description" Class="mt-3" HelperText="additional informations about the Project" Lines="3" T="string" Variant="Variant.Outlined"
						  @bind-Value="newProject.Description" For="@(() => newProject.Description)" />
			<br/>
			<br/>
		<MudButton ButtonType="ButtonType.Submit">Save</MudButton>
		<MudButton ButtonType="ButtonType.Button" @onclick="Cancel">Cancel</MudButton>

		</EditForm>
	</DialogContent>
</MudDialog>


@code {
	private Project newProject = new Project();

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public Action<bool> OnProjectAdded { get; set; } // Update the type to

	private async Task SaveProject()
	{
		newProject.assignedTeam = new Team() { members= new List<Teammember>() };
		newProject.Tasks = new List<ProjectTask>();
		StatusReport<EmptyVal> status = await AddProjectUseCase.ExecuteAsync(newProject);
		Snackbar.Add(status.Reason, status.severity);

		MudDialog.Close(DialogResult.Ok(true));
		OnProjectAdded?.Invoke(true); // Invoke the event callback to trigger reload

	}

	void Cancel() => MudDialog.Cancel();
}


